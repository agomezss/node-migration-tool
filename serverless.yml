service:
  name: migration-tool

custom:
  isLocalhost: ${opt:isLocalhost, "no"}
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  defaultDeploymentRegion: us-east-1
  accountIdAWS: "#{AWS::AccountId}"
  accountId: ${opt:accountId, self:custom.accountIdAWS}
  iamRoleName: ${self:service.name}-${self:provider.stage}-${self:provider.region}-lambdaRole
  arnSnsPrefix: arn:aws:sns:${self:provider.region}:${self:custom.accountId}
  arnSqsPrefix: arn:aws:sqs:${self:provider.region}:${self:custom.accountId}
  arnLambdaPrefix: arn:aws:lambda:${self:provider.region}:${self:custom.accountId}

  serverlessIfElse:
    - If: '"${self:custom.stage}" == "prod"'
      Set:
        provider.vpc:
            securityGroupIds:
              # - YOUR SECURITY_GROUPS_ID_HERE
            subnetIds:
              # - YOUR SUBNET_IDS_HERE

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, self:custom.defaultDeploymentRegion}
  memorySize: 512
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "apigateway:*"
      Resource:
        - "arn:aws:apigateway:${self:provider.region}::/*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "rds:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "cloudwatch:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "ec2:DescribeSecurityGroups"
        - "ec2:DescribeSubnets"
        - "ec2:DescribeVpcs"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource:
        - "*"
  vpc:
    securityGroupIds:
      # - YOUR_SECURITY_GROUP_ID_HERE
    subnetIds:
      # - YOUR_SUBNET_ID_HERE
  environment:
    DB_PGHOST: ${ssm:/dbconnection/host~true}
    DB_PGDATABASE: ${ssm:/dbconnection/database~true}
    DB_PGPORT: ${ssm:/dbconnection/port~true}
    DB_PGUSER: ${ssm:/dbconnection/user/shared~true}
    DB_PGPASSWORD: ${ssm:/dbconnection/password/shared~true}

plugins:
  - "@jimdo/serverless-dotenv"
  - serverless-pseudo-parameters
  - serverless-plugin-ifelse
